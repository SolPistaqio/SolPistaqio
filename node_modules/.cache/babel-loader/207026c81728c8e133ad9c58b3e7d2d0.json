{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Infograph/infograph.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2'; //import { defaults } from 'react-chartjs-2';\n//import { render } from '@testing-library/react';\n\nconst apiKey = 'H02HDVYAO5KH6A0E';\nconst numberNeeded = 20;\nconst sample = {\n  'Meta Data': {\n    Information: \"Daily Prices and Volumes for Digital Currency\",\n    'Digital Currency Code': \"ETH\",\n    'Digital Currency Name': \"Ethereum\",\n    'Market Code': \"USD\",\n    'Market Name': \"United States Dollar\",\n    'Last Refreshed': \"2020-04-10 00:00:00\",\n    'Time Zone': \"UTC\"\n  },\n  'Time Series (Digital Currency Daily)': {\n    '2020-04-10': {\n      '1a. open (USD)': \"169.56000000\"\n    },\n    '2020-04-09': {\n      '1a. open (USD)': \"173.15000000\"\n    },\n    '2020-04-08': {\n      '1a. open (USD)': \"164.62000000\"\n    }\n  }\n};\n\nfunction getStockdata(crypto, currency) {\n  const url = 'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol=' + crypto + '&market=' + currency + '&apikey=' + apiKey;\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(jsonResponse => {\n    console.log(jsonResponse);\n    return jsonResponse;\n  });\n}\n\n;\n\nclass Infograph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {\n        labels: Object.keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0, numberNeeded),\n        datasets: [{\n          label: this.props.data['Meta Data']['Digital Currency Name'],\n          data: Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {\n            return value['1a. open (USD)'];\n          }).reverse().slice(0, numberNeeded)\n        }]\n      }\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.search('BTC', 'USD');\n  }\n\n  render() {\n    console.log(); //getStockdata('ETH','USD');\n\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Line, {\n      data: this.state.chartData,\n      options: {\n        title: {\n          display: true,\n          text: this.props.data['Meta Data']['Market Name'] + '/' + this.props.data['Meta Data']['Digital Currency Name'],\n          fontSize: 25\n        },\n        legend: {\n          display: false,\n          position: 'left'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Get data\"));\n  }\n\n}\n\n;\n\nclass Coolchart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: sample\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleSearch(crypto, currency) {\n    getStockdata(crypto, currency).then(response => this.setState({\n      data: response\n    }));\n  }\n\n  render() {\n    console.log(this.state.data);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Infograph, {\n      data: this.state.data,\n      search: this.handleSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Coolchart;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Infograph/infograph.js"],"names":["React","Component","Line","apiKey","numberNeeded","sample","Information","getStockdata","crypto","currency","url","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","Infograph","constructor","props","state","chartData","labels","Object","keys","data","reverse","slice","datasets","label","values","map","value","handleClick","bind","e","search","render","title","display","text","fontSize","legend","position","Coolchart","handleSearch","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Line} from 'react-chartjs-2';\n//import { defaults } from 'react-chartjs-2';\n//import { render } from '@testing-library/react';\n\nconst apiKey = 'H02HDVYAO5KH6A0E';\n\nconst numberNeeded = 20;\n\nconst sample = {\n    'Meta Data':\n    {Information: \"Daily Prices and Volumes for Digital Currency\",\n    'Digital Currency Code': \"ETH\",\n    'Digital Currency Name': \"Ethereum\",\n    'Market Code': \"USD\",\n    'Market Name': \"United States Dollar\",\n    'Last Refreshed': \"2020-04-10 00:00:00\",\n    'Time Zone': \"UTC\"},\n'Time Series (Digital Currency Daily)':\n    {'2020-04-10': {'1a. open (USD)': \"169.56000000\"},\n    '2020-04-09': {'1a. open (USD)': \"173.15000000\"},\n    '2020-04-08':{'1a. open (USD)': \"164.62000000\"}}\n};\n\n\n\nfunction getStockdata(crypto ,currency) {\n    const url = 'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol='+crypto+'&market='+currency+'&apikey=' + apiKey\n    return fetch(url).then(response => {\n        if (response.ok) {\n          return response.json()\n        } \n          throw new Error('Request failed!');\n        \n      }, networkError => {\n        console.log(networkError.message)\n      }).then(jsonResponse=>{\n        console.log(jsonResponse);\n        return jsonResponse\n      })};\n\n\nclass Infograph extends Component {\nconstructor (props) {\n    super(props);\n    this.state = {\n        chartData: {\n           labels:  Object. keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded),\n           datasets: [{\n            label: this.props.data['Meta Data']['Digital Currency Name'],\n            data: Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open (USD)']}).reverse().slice(0,numberNeeded),\n           } ]\n        }\n    }\nthis.handleClick=this.handleClick.bind(this);\n}\n\nhandleClick(e){\n    this.props.search('BTC','USD')\n}\n\nrender() {\n    console.log();\n  //getStockdata('ETH','USD');\n    return (\n        <div className=\"chart\">\n            <Line \n                data= {this.state.chartData}\n            \n                options = {{\n                    title: {\n                        display: true,\n                        text: this.props.data['Meta Data']['Market Name']+'/'+this.props.data['Meta Data']['Digital Currency Name'],\n                        fontSize: 25\n                    },\n                    legend: {\n                       display: false,\n                       position: 'left'\n                    }\n                }}\n            \n            \n            />\n        <button onClick={this.handleClick}>Get data</button>\n        </div>\n    )\n}\n};\n\nclass Coolchart extends React.Component{\n    constructor (props) {\n        super(props);\n        this.state = {\n            data:sample\n        }\n    this.handleSearch = this.handleSearch.bind(this)\n    }\n    handleSearch(crypto ,currency){\n       getStockdata(crypto ,currency).then(response => this.setState({\n           data: response\n       }))\n    }\n    render() {\n    console.log(this.state.data);\n      return ( <div>\n      <Infograph data={this.state.data} search={this.handleSearch}/>\n      </div>\n      )\n    }\n}\nexport default Coolchart;"]},"metadata":{},"sourceType":"module"}