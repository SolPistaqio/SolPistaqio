{"ast":null,"code":"import _objectSpread from \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Test/Mailchimp.js\";\nimport React from \"react\";\nimport jsonp from \"jsonp\";\nimport PropTypes from 'prop-types';\n\nclass Mailchimp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    const _this$props = this.props,\n          fields = _this$props.fields,\n          action = _this$props.action;\n    let values = fields.map(field => {\n      return `${field.name}=${encodeURIComponent(this.state[field.name])}`;\n    }).join(\"&\");\n    values = values + '&PET=' + this.props.pet;\n    console.log(values);\n    const path = `${action}&${values}`;\n    const url = path.replace('/post?', '/post-json?');\n    const regex = /^([\\w_\\.\\-\\+])+\\@([\\w\\-]+\\.)+([\\w]{2,10})+$/;\n    const email = this.state['EMAIL'];\n    !regex.test(email) ? this.setState({\n      status: \"empty\"\n    }) : this.sendData(url);\n    this.props.end();\n  }\n\n  sendData(url) {\n    this.setState({\n      status: \"sending\"\n    });\n    jsonp(url, {\n      param: \"c\"\n    }, (err, data) => {\n      if (data.msg.includes(\"already subscribed\")) {\n        this.setState({\n          status: 'duplicate'\n        });\n      } else if (err) {\n        this.setState({\n          status: 'error'\n        });\n      } else if (data.result !== 'success') {\n        this.setState({\n          status: 'error'\n        });\n      } else {\n        this.setState({\n          status: 'success'\n        });\n      }\n\n      ;\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          fields = _this$props2.fields,\n          styles = _this$props2.styles,\n          className = _this$props2.className,\n          buttonClassName = _this$props2.buttonClassName;\n\n    const messages = _objectSpread({}, Mailchimp.defaultProps.messages, {}, this.props.messages);\n\n    const status = this.state.status;\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit.bind(this),\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, fields.map(input => React.createElement(\"input\", Object.assign({}, input, {\n      key: input.name,\n      onChange: ({\n        target\n      }) => this.setState({\n        [input.name]: target.value\n      }),\n      defaultValue: this.state[input.name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      disabled: status === \"sending\" || status === \"success\",\n      type: \"submit\",\n      className: buttonClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, messages.button), React.createElement(\"div\", {\n      className: \"msg-alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, status === \"sending\" && React.createElement(\"p\", {\n      style: styles.sendingMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, messages.sending), status === \"success\" && React.createElement(\"p\", {\n      style: styles.successMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, messages.success), status === \"duplicate\" && React.createElement(\"p\", {\n      style: styles.duplicateMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, messages.duplicate), status === \"empty\" && React.createElement(\"p\", {\n      style: styles.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, messages.empty), status === \"error\" && React.createElement(\"p\", {\n      style: styles.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, messages.error)));\n  }\n\n}\n\nMailchimp.defaultProps = {\n  messages: {\n    sending: \"Sending...\",\n    success: \"Thank you for subscribing!\",\n    error: \"An unexpected internal error has occurred.\",\n    empty: \"You must write an e-mail.\",\n    duplicate: \"Too many subscribe attempts for this email address\",\n    button: \"Subscribe!\"\n  },\n  buttonClassName: \"\",\n  styles: {\n    sendingMsg: {\n      color: \"#0652DD\"\n    },\n    successMsg: {\n      color: \"#009432\"\n    },\n    duplicateMsg: {\n      color: \"#EE5A24\"\n    },\n    errorMsg: {\n      color: \"#ED4C67\"\n    }\n  }\n};\nMailchimp.propTypes = {\n  action: PropTypes.string,\n  messages: PropTypes.object,\n  fields: PropTypes.array,\n  styles: PropTypes.object,\n  className: PropTypes.string,\n  buttonClassName: PropTypes.string\n};\nexport default Mailchimp;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Test/Mailchimp.js"],"names":["React","jsonp","PropTypes","Mailchimp","Component","state","handleSubmit","evt","preventDefault","props","fields","action","values","map","field","name","encodeURIComponent","join","pet","console","log","path","url","replace","regex","email","test","setState","status","sendData","end","param","err","data","msg","includes","result","render","styles","className","buttonClassName","messages","defaultProps","bind","input","target","value","button","sendingMsg","sending","successMsg","success","duplicateMsg","duplicate","errorMsg","empty","error","color","propTypes","string","object","array"],"mappings":"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","sourcesContent":["\nimport React from \"react\"\nimport jsonp from \"jsonp\"\nimport PropTypes from 'prop-types';\n\nclass Mailchimp extends React.Component {\n  state = {};\n\n  handleSubmit(evt) {\n    evt.preventDefault();\n    const { fields, action } = this.props;\n    let values = fields.map(field => {\n      return `${field.name}=${encodeURIComponent(this.state[field.name])}`;\n    }).join(\"&\");\n    values = values +'&PET='+ this.props.pet;\n    console.log(values);\n    const path = `${action}&${values}`;\n    const url = path.replace('/post?', '/post-json?');\n    const regex = /^([\\w_\\.\\-\\+])+\\@([\\w\\-]+\\.)+([\\w]{2,10})+$/;\n    const email = this.state['EMAIL'];\n    (!regex.test(email)) ? this.setState({ status: \"empty\" }) : this.sendData(url);\n    this.props.end()\n  };\n\n  sendData(url) {\n    this.setState({ status: \"sending\" });\n    jsonp(url, { param: \"c\" }, (err, data) => {\n      if (data.msg.includes(\"already subscribed\")) {\n        this.setState({ status: 'duplicate' });\n      } else if (err) {\n        this.setState({ status: 'error' });\n      } else if (data.result !== 'success') {\n        this.setState({ status: 'error' });\n      } else {\n        this.setState({ status: 'success' });\n      };\n    });\n  }\n\n  render() {\n    const { fields, styles, className, buttonClassName } = this.props;\n    const messages = {\n      ...Mailchimp.defaultProps.messages,\n      ...this.props.messages\n    }\n    const { status } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit.bind(this)} className={className}>\n        {fields.map(input =>\n          <input\n            {...input}\n            key={input.name}\n            onChange={({ target }) => this.setState({ [input.name]: target.value })}\n            defaultValue={this.state[input.name]}\n          />\n        )}\n        <button\n          disabled={status === \"sending\" || status === \"success\"}\n          type=\"submit\"\n          className={buttonClassName}\n        >\n          {messages.button}\n        </button>\n        <div className='msg-alert'>\n          {status === \"sending\" && <p style={styles.sendingMsg}>{messages.sending}</p>}\n          {status === \"success\" && <p style={styles.successMsg}>{messages.success}</p>}\n          {status === \"duplicate\" && <p style={styles.duplicateMsg}>{messages.duplicate}</p>}\n          {status === \"empty\" && <p style={styles.errorMsg}>{messages.empty}</p>}\n          {status === \"error\" && <p style={styles.errorMsg}>{messages.error}</p>}\n        </div>\n      </form>\n    );\n  }\n}\n\nMailchimp.defaultProps = {\n  messages: {\n    sending: \"Sending...\",\n    success: \"Thank you for subscribing!\",\n    error: \"An unexpected internal error has occurred.\",\n    empty: \"You must write an e-mail.\",\n    duplicate: \"Too many subscribe attempts for this email address\",\n    button: \"Subscribe!\"\n  },\n  buttonClassName: \"\",\n  styles: {\n    sendingMsg: {\n      color: \"#0652DD\"\n    },\n    successMsg: {\n      color: \"#009432\"\n    },\n    duplicateMsg: {\n      color: \"#EE5A24\"\n    },\n    errorMsg: {\n      color: \"#ED4C67\"\n    }\n  }\n};\n\nMailchimp.propTypes = {\n  action: PropTypes.string,\n  messages: PropTypes.object,\n  fields: PropTypes.array,\n  styles: PropTypes.object,\n  className: PropTypes.string,\n  buttonClassName: PropTypes.string\n};\n\nexport default Mailchimp;\n"]},"metadata":{},"sourceType":"module"}