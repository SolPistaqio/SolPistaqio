{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/parks.js\";\nimport React from 'react';\n\nclass GetAPIDataForCity extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getVenues = async city => {\n      const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n      const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n      const url = 'https://api.foursquare.com/v2/venues/explore?near='; //const city = $input.val();\n\n      const urlToFetch = url + city + '&limit=50&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n\n      try {\n        const response = await fetch(urlToFetch);\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          const venues = jsonResponse.response.groups[0].items.map(item => item.venue);\n          console.log(venues);\n          this.setState({\n            venues: venues\n          });\n          return venues;\n        }\n\n        throw new Error('Request failed!');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getForecast = async city => {\n      const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n      const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather'; //const city = $input.val();\n\n      const urlToFetch = weatherUrl + '?q=' + city + '&APPID=' + openWeatherKey;\n\n      try {\n        const response = await fetch(urlToFetch);\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          console.log(jsonResponse);\n          this.setState({\n            forecast: jsonResponse\n          });\n          return jsonResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      city: 'Malta',\n      venues: [],\n      forecast: {}\n    };\n  }\n\n  render() {\n    const forecast = this.getForecast(this.state.city);\n    const venues = this.getVenues(this.state.city);\n    return React.createElement(RenderWalk, {\n      forecast: this.state.forecast,\n      venues: this.state.venues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }\n\n}\n\n;\n\nclass RenderWalk extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Hello\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.props.venues[0].name));\n  }\n\n}\n\n;\nexport default GetAPIDataForCity;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/parks.js"],"names":["React","GetAPIDataForCity","Component","constructor","props","getVenues","city","clientId","clientSecret","url","urlToFetch","response","fetch","ok","jsonResponse","json","venues","groups","items","map","item","venue","console","log","setState","Error","error","getForecast","openWeatherKey","weatherUrl","forecast","state","render","RenderWalk","name"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass GetAPIDataForCity extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            city : 'Malta',\n            venues : [],\n            forecast : {}\n      };\n      }\n\n\n    getVenues = async(city)=>{\n        const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n        const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n        const url = 'https://api.foursquare.com/v2/venues/explore?near=';\n        //const city = $input.val();\n        const urlToFetch = url + city + '&limit=50&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n        try{\n          const response = await fetch(urlToFetch)\n          if (response.ok) {\n            const jsonResponse = await response.json();\n            const venues = jsonResponse.response.groups[0].items.map(item => item.venue);\n            console.log(venues);\n            this.setState({\n                venues : venues,\n            });\n            return venues\n          } throw new Error('Request failed!')\n        }\n        catch(error){\n          console.log(error)\n        }\n      };\n      \n      getForecast = async(city) => {\n        const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n        const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n        //const city = $input.val();\n        const urlToFetch = weatherUrl +'?q='+city+'&APPID='+openWeatherKey;\n        try{\n        const response = await fetch(urlToFetch);\n          if (response.ok) {\n           const jsonResponse = await response.json();\n            console.log(jsonResponse);\n            this.setState({\n                forecast : jsonResponse\n            });\n            return jsonResponse;\n          }\n      }\n        catch(error) {\n          console.log(error)\n        }\n      }\n\n      \n\n      render(){\n          const forecast = this.getForecast(this.state.city);\n          const venues =  this.getVenues(this.state.city);\n      return <RenderWalk forecast={this.state.forecast} venues={this.state.venues}/>\n      }\n};\n\nclass RenderWalk extends React.Component{\n    \n    render(){\n        return <div>\n            <p>Hello</p>\n            \n            <p>{this.props.venues[0].name}</p>        \n\n            </div>\n    }\n\n};\nexport default GetAPIDataForCity;\n"]},"metadata":{},"sourceType":"module"}