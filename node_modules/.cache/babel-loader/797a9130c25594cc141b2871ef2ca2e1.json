{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/parks.js\";\nimport React from 'react';\n\nclass GetAPIDataForCity extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getVenues = async city => {\n      const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n      const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n      const url = 'https://api.foursquare.com/v2/venues/explore?near='; //const city = $input.val();\n\n      const urlToFetch = url + city + '&limit=50&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n\n      try {\n        const response = await fetch(urlToFetch);\n\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          const venues = jsonResponse.response.groups[0].items.map(item => item.venue);\n          console.log(venues);\n          return venues;\n        }\n\n        throw new Error('Request failed!');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getForecast = async city => {\n      const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n      const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather'; //const city = $input.val();\n\n      const urlToFetch = weatherUrl + '?q=' + city + '&APPID=' + openWeatherKey;\n\n      try {\n        const response = await fetch(urlToFetch);\n\n        if (response.ok) {\n          const jsonResponse = await response.json().then(RenderWalk.handleData(jsonResponse));\n          console.log(jsonResponse);\n          return jsonResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      city: 'Malta'\n    };\n  }\n\n  render() {\n    const forecast = this.getForecast(this.state.city);\n    const venues = this.getVenues(this.state.city);\n    return React.createElement(RenderWalk, {\n      forecast: forecast,\n      venues: venues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  }\n\n}\n\n;\n\nclass RenderWalk extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast: [],\n      venues: []\n    };\n    this.handleData = this.handleData.bind(this);\n  }\n\n  handleData(data) {\n    console.log('yep');\n    console.log(data); // if (data.weather !== undefined) {\n    // this.setState({\n    //   forecast : data,\n    // })\n    // } else if (data[0].location !== undefined) {\n    //   this.setState({\n    //      venues: data\n    //    })\n    //}\n  }\n\n  render() {\n    this.handleData();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Hello\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.forecast), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.venues));\n  }\n\n}\n\n;\nexport default GetAPIDataForCity;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/parks.js"],"names":["React","GetAPIDataForCity","Component","constructor","props","getVenues","city","clientId","clientSecret","url","urlToFetch","response","fetch","ok","jsonResponse","json","venues","groups","items","map","item","venue","console","log","Error","error","getForecast","openWeatherKey","weatherUrl","then","RenderWalk","handleData","state","render","forecast","bind","data"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass GetAPIDataForCity extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            city : 'Malta'\n      };\n      }\n\n\n    getVenues = async(city)=>{\n        const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n        const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n        const url = 'https://api.foursquare.com/v2/venues/explore?near=';\n        //const city = $input.val();\n        const urlToFetch = url + city + '&limit=50&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n        try{\n          const response = await fetch(urlToFetch)\n          if (response.ok) {\n            const jsonResponse = await response.json();\n            const venues = jsonResponse.response.groups[0].items.map(item => item.venue);\n            console.log(venues);\n            return venues\n          } throw new Error('Request failed!')\n        }\n        catch(error){\n          console.log(error)\n        }\n      };\n      \n      getForecast = async(city) => {\n        const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n        const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n        //const city = $input.val();\n        const urlToFetch = weatherUrl +'?q='+city+'&APPID='+openWeatherKey;\n        try{\n        const response = await fetch(urlToFetch);\n          if (response.ok) {\n           const jsonResponse = await response.json().then(RenderWalk.handleData(jsonResponse));\n            console.log(jsonResponse);\n            return jsonResponse;\n          }\n      }\n        catch(error) {\n          console.log(error)\n        }\n      }\n\n      \n\n      render(){\n          const forecast = this.getForecast(this.state.city);\n          const venues =  this.getVenues(this.state.city);\n      return <RenderWalk forecast={forecast} venues={venues}/>\n      }\n};\n\nclass RenderWalk extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast : [],\n            venues: [],\n      };\n      this.handleData = this.handleData.bind(this);\n      }\n      \nhandleData(data)\n      {\n        console.log('yep');\n       console.log(data);\n      // if (data.weather !== undefined) {\n       // this.setState({\n         //   forecast : data,\n         // })\n   // } else if (data[0].location !== undefined) {\n     //   this.setState({\n      //      venues: data\n      //    })\n    //}\n        }\n\n    render(){\n        this.handleData();\n        return <div>\n            <p>Hello</p>\n            <p>{this.state.forecast}</p>\n            <p>{this.state.venues}</p>        \n\n            </div>\n    }\n\n};\nexport default GetAPIDataForCity;\n"]},"metadata":{},"sourceType":"module"}