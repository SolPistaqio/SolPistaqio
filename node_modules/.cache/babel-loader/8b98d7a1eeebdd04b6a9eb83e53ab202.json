{"ast":null,"code":"function getVenues(city) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/explore?near='; //const city = $input.val();\n\n  const urlToFetch = url + city + '&limit=50&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response.json();\n    } //throw new Error('Request failed!');\n\n\n    return {};\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(response => {\n    console.log(response);\n\n    if (response.response //.groups[0]\n    ) {\n        const venues = response.response.groups[0].items.map(item => item.venue);\n        const parks = venues.filter(venue => venue.categories[0].name === \"Park\" || venue.categories[0].name === \"Trail\");\n        return parks;\n      }\n  });\n}\n\n;\n\nfunction getPhotos(venueID) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/' + venueID + '/photos';\n  const urlToFetch = url + '?limit=1&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return {}; //throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(jsonResponse => {\n    console.log(jsonResponse);\n    return jsonResponse;\n  }).then(jsonResponse => {\n    if (jsonResponse.response.photos.count > 0) {\n      const photo = jsonResponse.response.photos.items[0].prefix + '300x500' + jsonResponse.response.photos.items[0].suffix;\n      console.log(photo);\n      return photo;\n    } else console.log('No photo found for venue N 1');\n\n    return '';\n  });\n}\n\nfunction getForecast(city) {\n  const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n  const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather'; //const city = $input.val();\n\n  const urlToFetch = weatherUrl + '?q=' + city + '&APPID=' + openWeatherKey;\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response;\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(response => {\n    return response.json();\n  });\n}\n\nexport { getForecast, getVenues, getPhotos };","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/apisearch.js"],"names":["getVenues","city","clientId","clientSecret","url","urlToFetch","fetch","then","response","ok","json","networkError","console","log","message","venues","groups","items","map","item","venue","parks","filter","categories","name","getPhotos","venueID","jsonResponse","photos","count","photo","prefix","suffix","getForecast","openWeatherKey","weatherUrl","Error"],"mappings":"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","sourcesContent":["\n function getVenues(city) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/explore?near=';\n  //const city = $input.val();\n  const urlToFetch = url + city + '&limit=50&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n  return fetch(urlToFetch).then(response => {\n      if (response.ok) {return response.json()\n      } \n      //throw new Error('Request failed!');\n      return {}\n    }, networkError => {\n      console.log(networkError.message)\n    }).then(response=>{\n      console.log(response);\n      if(response.response\n        //.groups[0]\n        ){\n          const venues = response.response.groups[0].items.map(item => item.venue);\n          const parks = venues.filter(venue => venue.categories[0].name ===\"Park\" || venue.categories[0].name ===\"Trail\" );\n      return parks}\n    })    \n      };\n  function getPhotos (venueID) {\n    const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n    const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n    const url = 'https://api.foursquare.com/v2/venues/'+venueID+'/photos';\n    const urlToFetch = url  + '?limit=1&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n    return fetch(urlToFetch).then(response => {\n      if (response.ok) {\n        return response.json()\n      } return {}\n        //throw new Error('Request failed!');\n      \n    }, networkError => {\n      console.log(networkError.message)\n    }).then(jsonResponse=>{\n      console.log(jsonResponse);\n      return jsonResponse\n    }).then(jsonResponse=>{\n      if (jsonResponse.response.photos.count >0 ){\n      const photo = jsonResponse.response.photos.items[0].prefix + '300x500' + jsonResponse.response.photos.items[0].suffix;\n      console.log(photo);\n      return photo}\n    else console.log('No photo found for venue N 1')\n  return ''})\n  }\n\n\n      \n      function getForecast (city){\n        const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n        const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n        //const city = $input.val();\n        const urlToFetch = weatherUrl +'?q='+city+'&APPID='+openWeatherKey;\n\n        return fetch(urlToFetch).then (response => {\n          if(response.ok) {\n            return response\n          } \n          throw new Error('Request failed!');\n        }, networkError => {\n          console.log(networkError.message)\n        }).then(response => {return response.json()})\n        \n      }\n\n\nexport {getForecast, getVenues, getPhotos}\n"]},"metadata":{},"sourceType":"module"}