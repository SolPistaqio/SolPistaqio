{"ast":null,"code":"import React from 'react';\n\nclass GetAPIDataForCity extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getForecast = async city => {\n      const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n      const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather'; //const city = $input.val();\n\n      const urlToFetch = weatherUrl + '?q=' + city + '&APPID=' + openWeatherKey;\n\n      try {\n        const response = await fetch(urlToFetch);\n\n        if (response.ok) {\n          const jsonResponse = await response.json(); //console.log(jsonResponse);\n\n          return jsonResponse;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n\n  getVenues(city) {\n    const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n    const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n    const url = 'https://api.foursquare.com/v2/venues/explore?near='; //const city = $input.val();\n\n    const urlToFetch = url + city + '&limit=50&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n    fetch(urlToFetch).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error('Request failed!');\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(response => {\n      const venues = response.response.groups[0].items.map(item => item.venue);\n      console.log(venues);\n      return venues;\n    });\n  }\n\n}\n\n;\nexport default GetAPIDataForCity;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/apisearch.js"],"names":["React","GetAPIDataForCity","Component","getForecast","city","openWeatherKey","weatherUrl","urlToFetch","response","fetch","ok","jsonResponse","json","error","console","log","getVenues","clientId","clientSecret","url","then","Error","networkError","message","venues","groups","items","map","item","venue"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAA+C;AAAA;AAAA;;AAAA,SAuBzCC,WAvByC,GAuB3B,MAAMC,IAAN,IAAe;AAC3B,YAAMC,cAAc,GAAG,kCAAvB;AACA,YAAMC,UAAU,GAAG,iDAAnB,CAF2B,CAG3B;;AACA,YAAMC,UAAU,GAAGD,UAAU,GAAE,KAAZ,GAAkBF,IAAlB,GAAuB,SAAvB,GAAiCC,cAApD;;AACA,UAAG;AACH,cAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAD,CAA5B;;AACE,YAAIC,QAAQ,CAACE,EAAb,EAAiB;AAChB,gBAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B,CADgB,CAEf;;AACA,iBAAOD,YAAP;AACD;AACJ,OAPC,CAQA,OAAME,KAAN,EAAa;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAvCwC;AAAA;;AAE3CG,EAAAA,SAAS,CAAEZ,IAAF,EAAQ;AACb,UAAMa,QAAQ,GAAG,kDAAjB;AACA,UAAMC,YAAY,GAAG,kDAArB;AACA,UAAMC,GAAG,GAAG,oDAAZ,CAHa,CAIb;;AACA,UAAMZ,UAAU,GAAGY,GAAG,GAAGf,IAAN,GAAa,sBAAb,GAAqCa,QAArC,GAAgD,iBAAhD,GAAkEC,YAAlE,GAA+E,aAAlG;AACAT,IAAAA,KAAK,CAACF,UAAD,CAAL,CAAkBa,IAAlB,CAAuBZ,QAAQ,IAAI;AAC/B,UAAIA,QAAQ,CAACE,EAAb,EAAiB;AAAC,eAAOF,QAAQ,CAACI,IAAT,EAAP;AACjB;;AACC,YAAM,IAAIS,KAAJ,CAAU,iBAAV,CAAN;AAEH,KALH,EAKKC,YAAY,IAAI;AACjBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,YAAY,CAACC,OAAzB;AACD,KAPH,EAOKH,IAPL,CAOUZ,QAAQ,IAAE;AACZ,YAAMgB,MAAM,GAAGhB,QAAQ,CAACA,QAAT,CAAkBiB,MAAlB,CAAyB,CAAzB,EAA4BC,KAA5B,CAAkCC,GAAlC,CAAsCC,IAAI,IAAIA,IAAI,CAACC,KAAnD,CAAf;AACJf,MAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;AACA,aAAOA,MAAP;AACD,KAXH;AAaK;;AArBkC;;AAyC9C;AAGD,eAAevB,iBAAf","sourcesContent":["import React from 'react';\n\nclass GetAPIDataForCity extends React.Component{\n    \n    getVenues (city) {\n        const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n        const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n        const url = 'https://api.foursquare.com/v2/venues/explore?near=';\n        //const city = $input.val();\n        const urlToFetch = url + city + '&limit=50&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n        fetch(urlToFetch).then(response => {\n            if (response.ok) {return response.json()\n            } \n              throw new Error('Request failed!');\n            \n          }, networkError => {\n            console.log(networkError.message)\n          }).then(response=>{\n                const venues = response.response.groups[0].items.map(item => item.venue);\n            console.log(venues);\n            return venues\n          })\n                \n            };\n      \n      getForecast = async(city) => {\n        const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n        const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n        //const city = $input.val();\n        const urlToFetch = weatherUrl +'?q='+city+'&APPID='+openWeatherKey;\n        try{\n        const response = await fetch(urlToFetch);\n          if (response.ok) {\n           const jsonResponse = await response.json();\n            //console.log(jsonResponse);\n            return jsonResponse;\n          }\n      }\n        catch(error) {\n          console.log(error)\n        }\n      }\n\n};\n\n\nexport default GetAPIDataForCity;\n"]},"metadata":{},"sourceType":"module"}