{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/game/grid.js\";\nimport React from 'react';\nimport './game.css';\nconst bad = ['0x1F354', '0x1F35F', '0x1F355', '0x1F96E', '0x1F361', '0x1F366', '0x1F369', '0x1F36A', '0x1F9C1', '0x1F36C'];\nconst good = ['0x1F957', '0x1F966', '0x1F96C', '0x1F952', '0x1F955', '0x1F346', '0x1F951', '0x1F345', '0x1F363', '0x1F360'];\nconst location = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n\nfunction getItemsNeeded(level) {\n  console.log('the level is ' + level);\n  const start = 4;\n  let neededItems = 5;\n\n  if (level < 6) {\n    neededItems = start + level;\n  } else if (level < 8) {\n    neededItems = level + 2;\n  } else {\n    neededItems = level - 3;\n  }\n\n  console.log('we will have ' + neededItems + ' items this round');\n  return neededItems;\n}\n\nfunction getNumberOfBad(level) {\n  if (level < 6) {\n    return level + 2;\n  } else {\n    return level - 1;\n  }\n}\n\nfunction getRandomRange(itemsNeeded, max) {\n  let range = [];\n\n  while (range.length < itemsNeeded) {\n    const randomNumber = Math.floor(Math.random() * Math.floor(max));\n    if (range.indexOf(randomNumber) === -1) range.push(randomNumber);\n  }\n\n  return range;\n}\n\nclass AffectionCouner extends React.Component {\n  render() {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Your affection level is \", this.props.affection);\n  }\n\n}\n\nclass FoodItem extends React.Component {\n  render() {\n    return React.createElement(\"span\", {\n      role: \"image\",\n      className: this.props.locations[this.props.food.indexOf(this.props.foodItem)],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, String.fromCodePoint(this.props.foodItem.pic));\n  }\n\n}\n\nclass Gamefield extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFoodChoise = this.handleFoodChoise.bind(this);\n  }\n\n  handleFoodChoise(foodItem) {\n    this.props.foodChoise(foodItem);\n  }\n\n  getfood(itemsNeeded, level) {\n    const badN = getNumberOfBad(level);\n    const goodN = itemsNeeded - badN;\n    console.log('from ' + itemsNeeded + ' number of items you get ' + goodN + ' of good and ' + badN + ' of bad');\n    let food = []; //get good food\n\n    const goodRange = getRandomRange(goodN, 10);\n    goodRange.forEach(index => food.push({\n      pic: good[index],\n      fType: 'good'\n    })); //add bad food\n\n    const badRange = getRandomRange(badN, 10);\n    badRange.forEach(index => food.push({\n      pic: bad[index],\n      fType: 'bad'\n    }));\n    console.log(food);\n    return food;\n  }\n\n  getLocation(itemsNeeded) {\n    const range = getRandomRange(itemsNeeded, 9);\n    let locations = [];\n    range.forEach(index => {\n      locations.push(location[index]);\n    });\n    console.log(locations);\n    return locations;\n  }\n\n  render() {\n    const level = this.props.level;\n    const itemsQ = getItemsNeeded(level);\n    const food = this.getfood(itemsQ, level);\n    const locations = this.getLocation(itemsQ);\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, food.map(foodItem => {\n      return React.createElement(FoodItem, {\n        key: foodItem.pic.toString(),\n        food: food,\n        locations: locations,\n        foodItem: foodItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default Gamefield;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/game/grid.js"],"names":["React","bad","good","location","getItemsNeeded","level","console","log","start","neededItems","getNumberOfBad","getRandomRange","itemsNeeded","max","range","length","randomNumber","Math","floor","random","indexOf","push","AffectionCouner","Component","render","props","affection","FoodItem","locations","food","foodItem","String","fromCodePoint","pic","Gamefield","constructor","handleFoodChoise","bind","foodChoise","getfood","badN","goodN","goodRange","forEach","index","fType","badRange","getLocation","itemsQ","map","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './game.css'\n\nconst bad = ['0x1F354','0x1F35F','0x1F355','0x1F96E','0x1F361','0x1F366','0x1F369','0x1F36A','0x1F9C1','0x1F36C'];\nconst good = ['0x1F957','0x1F966','0x1F96C','0x1F952','0x1F955','0x1F346','0x1F951','0x1F345','0x1F363','0x1F360'];\nconst location = ['one', 'two','three','four','five','six','seven','eight','nine']\n\n\nfunction getItemsNeeded(level) {\n    console.log('the level is ' + level)\n    const start = 4;\n    let neededItems = 5;\n    if (level<6){\n        neededItems = start + level;\n    } else if (level<8){\n        neededItems = level + 2\n    } else {\n        neededItems = level - 3\n    }\n    console.log('we will have '+neededItems+ ' items this round');\n    return neededItems\n    \n}\n\nfunction getNumberOfBad (level){\n    if (level<6){\n        return level + 2\n    } else {\n        return level - 1\n    }\n}\n\nfunction getRandomRange (itemsNeeded, max){\n    let range = [];\n    while(range.length<itemsNeeded) {\n    const randomNumber = Math.floor(Math.random() * Math.floor(max));\n    if(range.indexOf(randomNumber) === -1) range.push(randomNumber);\n    }\n    return range\n}\n\nclass AffectionCouner extends React.Component{\nrender(){\nreturn <p>Your affection level is {this.props.affection}</p>\n}\n}\nclass FoodItem extends React.Component{\nrender(){\n    return (<span role=\"image\"  className={this.props.locations[this.props.food.indexOf(this.props.foodItem)]}>{String.fromCodePoint(this.props.foodItem.pic)}</span>)\n}\n}\n\n\nclass Gamefield extends React.Component{\n\n    constructor(props) {\n        super(props);\nthis.handleFoodChoise=this.handleFoodChoise.bind(this); \n      }\n\n    handleFoodChoise(foodItem){\n        this.props.foodChoise(foodItem)\n    }\n    \n    getfood(itemsNeeded, level) {\n        const badN = getNumberOfBad(level);\n        const goodN = itemsNeeded - badN;\n        console.log('from '+itemsNeeded+' number of items you get '+goodN+ ' of good and '+badN+ ' of bad')\n\n        let food = [];\n        //get good food\n        const goodRange = getRandomRange(goodN, 10);\n        goodRange.forEach(index=>\n            food.push(\n                {pic: good[index],\n                fType: 'good'}\n                )\n            )\n        \n        //add bad food\n        const badRange = getRandomRange(badN, 10);\n        badRange.forEach(index=>\n            food.push(\n                {pic: bad[index],\n                fType: 'bad'}\n                )\n            )\n        console.log(food);\n        return food\n        \n    }\n\n    getLocation (itemsNeeded){\n        const range = getRandomRange(itemsNeeded, 9);\n        let locations = [];\n        range.forEach(index=> {\n            locations.push(location[index])\n        })\n        console.log(locations);\n        return locations\n    }\n    \n    render(){\n        const level = this.props.level;\n        const itemsQ = getItemsNeeded(level);\n        const food = this.getfood(itemsQ, level);\n        const locations = this.getLocation(itemsQ);\n        return  (<div className='grid'>\n            {food.map(foodItem => {\n                \n                return <FoodItem key ={foodItem.pic.toString()} food={food} locations={locations} foodItem={foodItem}/>\n                \n            })}\n\n        </div>)\n    }\n}\n\nexport default Gamefield;\n\n\n\n"]},"metadata":{},"sourceType":"module"}