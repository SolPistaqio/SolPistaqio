{"ast":null,"code":"function getVenues(city) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/explore?near='; //const city = $input.val();\n\n  const urlToFetch = url + city + '&limit=50&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(response => {\n    if (response.response.groups[0]) {\n      const venues = response.response.groups[0].items.map(item => item.venue);\n      const parks = venues.filter(venue => venue.categories[0].name === \"Park\" || venue.categories[0].name === \"Trail\"); //console.log(venues);\n\n      getPhotos(parks[0].id);\n      return parks;\n    }\n  });\n}\n\n;\n\nfunction getPhotos(venueID) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/' + venueID + '/photos';\n  const urlToFetch = url + '?limit=1&client_id=' + clientId + '&client_secret=' + clientSecret + '&v=20200225';\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(jsonResponse => {\n    console.log(jsonResponse);\n    const photo = jsonResponse.reponse; //.photos.items[0].prefix + '300x500' + jsonResponse.reponse.photos.items[0].suffix;\n\n    console.log(photo);\n    return jsonResponse;\n  });\n}\n\nfunction getForecast(city) {\n  const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n  const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather'; //const city = $input.val();\n\n  const urlToFetch = weatherUrl + '?q=' + city + '&APPID=' + openWeatherKey;\n  return fetch(urlToFetch).then(response => {\n    if (response.ok) {\n      return response;\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(response => {\n    return response.json();\n  });\n}\n\nexport { getForecast, getVenues };","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Parks and weather/apisearch.js"],"names":["getVenues","city","clientId","clientSecret","url","urlToFetch","fetch","then","response","ok","json","Error","networkError","console","log","message","groups","venues","items","map","item","venue","parks","filter","categories","name","getPhotos","id","venueID","jsonResponse","photo","reponse","getForecast","openWeatherKey","weatherUrl"],"mappings":"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","sourcesContent":["\n function getVenues(city) {\n  const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n  const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n  const url = 'https://api.foursquare.com/v2/venues/explore?near=';\n  //const city = $input.val();\n  const urlToFetch = url + city + '&limit=50&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n  return fetch(urlToFetch).then(response => {\n      if (response.ok) {return response.json()\n      } \n        throw new Error('Request failed!');\n      \n    }, networkError => {\n      console.log(networkError.message)\n    }).then(response=>{\n      if(response.response.groups[0]){\n          const venues = response.response.groups[0].items.map(item => item.venue);\n          const parks = venues.filter(venue => venue.categories[0].name ===\"Park\" || venue.categories[0].name ===\"Trail\" );\n      //console.log(venues);\n      getPhotos(parks[0].id)\n      return parks}\n    })\n          \n      };\n  function getPhotos (venueID) {\n    const clientId = 'JR4J5UNKZQLHYDALGZA2FO2LUSNZRNKXZ5O5K2TWVST3PEYZ';\n    const clientSecret = 'OOEWMJ4EWHA3G1ABVY42QXLIXJ1XGN0UHWUTC05J0HXOOK5H';\n    const url = 'https://api.foursquare.com/v2/venues/'+venueID+'/photos';\n    const urlToFetch = url  + '?limit=1&client_id='+ clientId + '&client_secret='+clientSecret+'&v=20200225';\n    return fetch(urlToFetch).then(response => {\n      if (response.ok) {\n        return response.json()\n      } \n        throw new Error('Request failed!');\n      \n    }, networkError => {\n      console.log(networkError.message)\n    }).then(jsonResponse=>{\n      console.log(jsonResponse);\n      const photo = jsonResponse.reponse;\n      //.photos.items[0].prefix + '300x500' + jsonResponse.reponse.photos.items[0].suffix;\n      console.log(photo);\n      return jsonResponse\n    })\n  }\n\n\n      \n      function getForecast (city){\n        const openWeatherKey = '24baa893cee78ee225eca9d32759df14';\n        const weatherUrl = 'https://api.openweathermap.org/data/2.5/weather';\n        //const city = $input.val();\n        const urlToFetch = weatherUrl +'?q='+city+'&APPID='+openWeatherKey;\n\n        return fetch(urlToFetch).then (response => {\n          if(response.ok) {\n            return response\n          } throw new Error('Request failed!');\n        }, networkError => {\n          console.log(networkError.message)\n        }).then(response => {return response.json()})\n        \n      }\n\n\nexport {getForecast, getVenues}\n"]},"metadata":{},"sourceType":"module"}