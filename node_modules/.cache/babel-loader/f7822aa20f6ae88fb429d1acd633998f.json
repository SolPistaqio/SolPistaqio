{"ast":null,"code":"var _jsxFileName = \"/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Infograph/infograph.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2'; //import { defaults } from 'react-chartjs-2';\n//import { render } from '@testing-library/react';\n\nconst apiKey = 'H02HDVYAO5KH6A0E';\nconst numberNeeded = 20;\nconst sample = {\n  'Meta Data': {\n    Information: \"Daily Prices and Volumes for Digital Currency\",\n    'Digital Currency Code': \"ETH\",\n    'Digital Currency Name': \"Ethereum\",\n    'Market Code': \"USD\",\n    'Market Name': \"United States Dollar\",\n    'Last Refreshed': \"2020-04-10 00:00:00\",\n    'Time Zone': \"UTC\"\n  },\n  'Time Series (Digital Currency Daily)': {\n    '2020-04-10': {\n      '1a. open (USD)': \"169.56000000\"\n    },\n    '2020-04-09': {\n      '1a. open (USD)': \"173.15000000\"\n    },\n    '2020-04-08': {\n      '1a. open (USD)': \"164.62000000\"\n    }\n  }\n};\n\nfunction getStockdata(crypto, currency) {\n  const url = 'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol=' + crypto + '&market=' + currency + '&apikey=' + apiKey;\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message);\n  }).then(jsonResponse => {\n    //console.log(jsonResponse);\n    const data = {\n      labels: Object.keys(jsonResponse['Time Series (Digital Currency Daily)']).reverse().slice(0, numberNeeded),\n      label: jsonResponse['Meta Data']['3. Digital Currency Name'],\n      data: Object.values(jsonResponse['Time Series (Digital Currency Daily)']).map(value => {\n        return value['1a. open (' + jsonResponse['Meta Data']['4. Market Code'] + ')'];\n      }).reverse().slice(0, numberNeeded).map(value => {\n        return parseFloat(value);\n      }),\n      text: jsonResponse['Meta Data']['5. Market Name'] + '/' + jsonResponse['Meta Data']['3. Digital Currency Name']\n    };\n    return data;\n  });\n}\n\n;\n\nclass Infograph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {\n        labels: this.props.data.labels,\n        //Object. keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded),\n        datasets: [{\n          label: this.props.data.label,\n          //this.props.data['Meta Data']['3. Digital Currency Name'],\n          data: this.props.data.data // Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open ('+this.props.data['Meta Data']['4. Market Code']+')']}).reverse().slice(0,numberNeeded).map(\n          //     value => {return parseFloat(value)}\n          // )\n\n        }]\n      }\n    };\n    this.handleClick = this.handleClick.bind(this); //this.componentWillMount=this.componentWillMount.bind(this);\n  }\n\n  handleClick(e) {\n    this.props.search('BTC', 'EUR').then(this.setState({\n      labels: this.props.data.labels,\n      label: this.props.data.label,\n      data: this.props.data.data\n    }));\n  }\n\n  render() {\n    //console.log(Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open ('+this.props.data['Meta Data']['4. Market Code']+')']}).reverse().slice(0,numberNeeded).map(\n    //    value => {return parseFloat(value)}\n    // ));\n    //  console.log(Object. keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded));\n    //getStockdata('ETH','USD');\n    const data = {\n      labels: this.props.data.labels,\n      datasets: [{\n        label: this.props.data.label,\n        data: this.props.data.data\n      }]\n    };\n\n    if (this.props.show) {\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        className: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Line, {\n        data: data,\n        options: {\n          title: {\n            display: true,\n            text: this.props.data.text,\n            fontSize: 25\n          },\n          legend: {\n            display: false,\n            position: 'left'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Get data\"));\n    } else {\n      return React.createElement(\"button\", {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Get data\");\n    }\n  }\n\n}\n\n;\n\nclass Coolchart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: sample,\n      display: false\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleSearch(crypto, currency) {\n    return getStockdata(crypto, currency).then(response => this.setState({\n      data: response,\n      display: true\n    }));\n  }\n\n  render() {\n    //console.log(this.state.data);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Infograph, {\n      show: this.state.display,\n      data: this.state.data,\n      search: this.handleSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Coolchart;","map":{"version":3,"sources":["/Users/sol/Documents/projects/react/Sol/portrolio/portfolio/src/components/Infograph/infograph.js"],"names":["React","Component","Line","apiKey","numberNeeded","sample","Information","getStockdata","crypto","currency","url","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","data","labels","Object","keys","reverse","slice","label","values","map","value","parseFloat","text","Infograph","constructor","props","state","chartData","datasets","handleClick","bind","e","search","setState","render","show","title","display","fontSize","legend","position","Coolchart","handleSearch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAoB,iBAApB,C,CACA;AACA;;AAEA,MAAMC,MAAM,GAAG,kBAAf;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,MAAM,GAAG;AACX,eACA;AAACC,IAAAA,WAAW,EAAE,+CAAd;AACA,6BAAyB,KADzB;AAEA,6BAAyB,UAFzB;AAGA,mBAAe,KAHf;AAIA,mBAAe,sBAJf;AAKA,sBAAkB,qBALlB;AAMA,iBAAa;AANb,GAFW;AASf,0CACI;AAAC,kBAAc;AAAC,wBAAkB;AAAnB,KAAf;AACA,kBAAc;AAAC,wBAAkB;AAAnB,KADd;AAEA,kBAAa;AAAC,wBAAkB;AAAnB;AAFb;AAVW,CAAf;;AAiBA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,QAA9B,EAAwC;AACpC,QAAMC,GAAG,GAAG,8EAA4EF,MAA5E,GAAmF,UAAnF,GAA8FC,QAA9F,GAAuG,UAAvG,GAAoHN,MAAhI;AACA,SAAOQ,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,QAAQ,IAAI;AAC/B,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACC,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AAEH,GANI,EAMFC,YAAY,IAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,OAAzB;AACD,GARI,EAQFR,IARE,CAQGS,YAAY,IAAE;AACrB;AAEC,UAAMC,IAAI,GACV;AAACC,MAAAA,MAAM,EAAEC,MAAM,CAAEC,IAAR,CAAaJ,YAAY,CAAC,sCAAD,CAAzB,EAAmEK,OAAnE,GAA6EC,KAA7E,CAAmF,CAAnF,EAAqFvB,YAArF,CAAT;AACAwB,MAAAA,KAAK,EAAEP,YAAY,CAAC,WAAD,CAAZ,CAA0B,0BAA1B,CADP;AAEAC,MAAAA,IAAI,EAAEE,MAAM,CAACK,MAAP,CAAcR,YAAY,CAAC,sCAAD,CAA1B,EAAoES,GAApE,CAAwEC,KAAK,IAAI;AAAC,eAAOA,KAAK,CAAC,eAAaV,YAAY,CAAC,WAAD,CAAZ,CAA0B,gBAA1B,CAAb,GAAyD,GAA1D,CAAZ;AAA2E,OAA7J,EAA+JK,OAA/J,GAAyKC,KAAzK,CAA+K,CAA/K,EAAiLvB,YAAjL,EAA+L0B,GAA/L,CACEC,KAAK,IAAI;AAAC,eAAOC,UAAU,CAACD,KAAD,CAAjB;AAAyB,OADrC,CAFN;AAIAE,MAAAA,IAAI,EAAGZ,YAAY,CAAC,WAAD,CAAZ,CAA0B,gBAA1B,IAA4C,GAA5C,GAAgDA,YAAY,CAAC,WAAD,CAAZ,CAA0B,0BAA1B;AAJvD,KADA;AAOA,WAAOC,IAAP;AAED,GApBI,CAAP;AAoBK;;AAAA;;AAGT,MAAMY,SAAN,SAAwBjC,SAAxB,CAAkC;AAClCkC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AACRf,QAAAA,MAAM,EAAG,KAAKa,KAAL,CAAWd,IAAX,CAAgBC,MADjB;AAER;AACAgB,QAAAA,QAAQ,EAAE,CAAC;AACVX,UAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWd,IAAX,CAAgBM,KADb;AAEV;AACAN,UAAAA,IAAI,EAAE,KAAKc,KAAL,CAAWd,IAAX,CAAgBA,IAHZ,CAIX;AACA;AACA;;AANW,SAAD;AAHF;AADF,KAAb;AAcJ,SAAKkB,WAAL,GAAiB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAjB,CAhBoB,CAiBpB;AACC;;AAEDD,EAAAA,WAAW,CAACE,CAAD,EAAG;AACV,SAAKN,KAAL,CAAWO,MAAX,CAAkB,KAAlB,EAAwB,KAAxB,EAA+B/B,IAA/B,CAAoC,KAAKgC,QAAL,CAAc;AAC9CrB,MAAAA,MAAM,EAAG,KAAKa,KAAL,CAAWd,IAAX,CAAgBC,MADqB;AAE9CK,MAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWd,IAAX,CAAgBM,KAFuB;AAG9CN,MAAAA,IAAI,EAAE,KAAKc,KAAL,CAAWd,IAAX,CAAgBA;AAHwB,KAAd,CAApC;AAKH;;AAGDuB,EAAAA,MAAM,GAAG;AACL;AACA;AACD;AACD;AACA;AACA,UAAMvB,IAAI,GAAG;AACXC,MAAAA,MAAM,EAAG,KAAKa,KAAL,CAAWd,IAAX,CAAgBC,MADd;AAEXgB,MAAAA,QAAQ,EAAE,CAAC;AACPX,QAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWd,IAAX,CAAgBM,KADhB;AAEPN,QAAAA,IAAI,EAAE,KAAKc,KAAL,CAAWd,IAAX,CAAgBA;AAFf,OAAD;AAFC,KAAb;;AAOA,QAAI,KAAKc,KAAL,CAAWU,IAAf,EAAqB;AACnB5B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKkB,KAAjB;AACF,aACM;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AACI,QAAA,IAAI,EAAGf,IADX;AAGI,QAAA,OAAO,EAAI;AACPyB,UAAAA,KAAK,EAAE;AACHC,YAAAA,OAAO,EAAE,IADN;AAEHf,YAAAA,IAAI,EAAE,KAAKG,KAAL,CAAWd,IAAX,CAAgBW,IAFnB;AAGHgB,YAAAA,QAAQ,EAAE;AAHP,WADA;AAMPC,UAAAA,MAAM,EAAE;AACLF,YAAAA,OAAO,EAAE,KADJ;AAELG,YAAAA,QAAQ,EAAE;AAFL;AAND,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAkBI;AAAQ,QAAA,OAAO,EAAE,KAAKX,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBJ,CADN;AAqBI,KAvBJ,MAwBO;AAAC,aAAO;AAAQ,QAAA,OAAO,EAAE,KAAKA,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAA4D;AACrE;;AApEiC;;AAqEjC;;AAED,MAAMY,SAAN,SAAwBpD,KAAK,CAACC,SAA9B,CAAuC;AACnCkC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTf,MAAAA,IAAI,EAAEjB,MADG;AAET2C,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIJ,SAAKK,YAAL,GAAoB,KAAKA,YAAL,CAAkBZ,IAAlB,CAAuB,IAAvB,CAApB;AACC;;AACDY,EAAAA,YAAY,CAAC7C,MAAD,EAASC,QAAT,EAAkB;AAC5B,WAAOF,YAAY,CAACC,MAAD,EAASC,QAAT,CAAZ,CAA+BG,IAA/B,CAAoCC,QAAQ,IAAI,KAAK+B,QAAL,CAAc;AAChEtB,MAAAA,IAAI,EAAET,QAD0D;AAEhEmC,MAAAA,OAAO,EAAE;AAFuD,KAAd,CAAhD,CAAP;AAID;;AACDH,EAAAA,MAAM,GAAG;AACT;AACE,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACT,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,KAAKR,KAAL,CAAWW,OAA5B;AAAqC,MAAA,IAAI,EAAE,KAAKX,KAAL,CAAWf,IAAtD;AAA4D,MAAA,MAAM,EAAE,KAAK+B,YAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS,CAAT;AAID;;AArBkC;;AAuBvC,eAAeD,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Line} from 'react-chartjs-2';\n//import { defaults } from 'react-chartjs-2';\n//import { render } from '@testing-library/react';\n\nconst apiKey = 'H02HDVYAO5KH6A0E';\n\nconst numberNeeded = 20;\n\nconst sample = {\n    'Meta Data':\n    {Information: \"Daily Prices and Volumes for Digital Currency\",\n    'Digital Currency Code': \"ETH\",\n    'Digital Currency Name': \"Ethereum\",\n    'Market Code': \"USD\",\n    'Market Name': \"United States Dollar\",\n    'Last Refreshed': \"2020-04-10 00:00:00\",\n    'Time Zone': \"UTC\"},\n'Time Series (Digital Currency Daily)':\n    {'2020-04-10': {'1a. open (USD)': \"169.56000000\"},\n    '2020-04-09': {'1a. open (USD)': \"173.15000000\"},\n    '2020-04-08':{'1a. open (USD)': \"164.62000000\"}}\n};\n\n\n\nfunction getStockdata(crypto ,currency) {\n    const url = 'https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol='+crypto+'&market='+currency+'&apikey=' + apiKey\n    return fetch(url).then(response => {\n        if (response.ok) {\n          return response.json()\n        } \n          throw new Error('Request failed!');\n        \n      }, networkError => {\n        console.log(networkError.message)\n      }).then(jsonResponse=>{\n       //console.log(jsonResponse);\n         \n        const data = \n        {labels: Object. keys(jsonResponse['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded),\n        label: jsonResponse['Meta Data']['3. Digital Currency Name'],\n        data: Object.values(jsonResponse['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open ('+jsonResponse['Meta Data']['4. Market Code']+')']}).reverse().slice(0,numberNeeded).map(\n                value => {return parseFloat(value)}),\n        text : jsonResponse['Meta Data']['5. Market Name']+'/'+jsonResponse['Meta Data']['3. Digital Currency Name'],\n        }\n        return data\n        \n      })};\n\n\nclass Infograph extends Component {\nconstructor (props) {\n    super(props);\n    this.state = {\n        chartData: {\n           labels:  this.props.data.labels,\n           //Object. keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded),\n           datasets: [{\n            label: this.props.data.label,\n            //this.props.data['Meta Data']['3. Digital Currency Name'],\n            data: this.props.data.data,\n           // Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open ('+this.props.data['Meta Data']['4. Market Code']+')']}).reverse().slice(0,numberNeeded).map(\n           //     value => {return parseFloat(value)}\n           // )\n           } ]\n        }\n    }\nthis.handleClick=this.handleClick.bind(this);\n//this.componentWillMount=this.componentWillMount.bind(this);\n}\n\nhandleClick(e){\n    this.props.search('BTC','EUR').then(this.setState({\n        labels:  this.props.data.labels,\n        label: this.props.data.label,\n        data: this.props.data.data,\n    }))\n}\n\n\nrender() {\n    //console.log(Object.values(this.props.data['Time Series (Digital Currency Daily)']).map(value => {return value['1a. open ('+this.props.data['Meta Data']['4. Market Code']+')']}).reverse().slice(0,numberNeeded).map(\n    //    value => {return parseFloat(value)}\n   // ));\n  //  console.log(Object. keys(this.props.data['Time Series (Digital Currency Daily)']).reverse().slice(0,numberNeeded));\n  //getStockdata('ETH','USD');\n  const data = {\n    labels:  this.props.data.labels,\n    datasets: [{\n        label: this.props.data.label, \n        data: this.props.data.data,\n    } ]\n}\n  if (this.props.show) { \n    console.log(this.state)\n  return (\n        <div className=\"chart\">\n            <Line \n                data= {data}\n            \n                options = {{\n                    title: {\n                        display: true,\n                        text: this.props.data.text,\n                        fontSize: 25\n                    },\n                    legend: {\n                       display: false,\n                       position: 'left'\n                    }\n                }}\n            \n            \n            />\n            <button onClick={this.handleClick}>Get data</button>\n        </div>\n    )}\n    else {return <button onClick={this.handleClick}>Get data</button>}\n}\n};\n\nclass Coolchart extends React.Component{\n    constructor (props) {\n        super(props);\n        this.state = {\n            data: sample,\n            display: false\n        }\n    this.handleSearch = this.handleSearch.bind(this)\n    }\n    handleSearch(crypto ,currency){\n      return getStockdata(crypto ,currency).then(response => this.setState({\n           data: response,\n           display: true\n       }))\n    }\n    render() {\n    //console.log(this.state.data);\n      return ( <div>\n      <Infograph show={this.state.display} data={this.state.data} search={this.handleSearch}/>\n      </div>\n      )\n    }\n}\nexport default Coolchart;"]},"metadata":{},"sourceType":"module"}